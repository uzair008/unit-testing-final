"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var nav_params_1 = require("./nav-params");
var nav_controller_1 = require("./nav-controller");
var ViewControllerMock = (function () {
    function ViewControllerMock() {
    }
    ViewControllerMock.instance = function () {
        var instance = jasmine.createSpyObj('ViewController', [
            'willEnter',
            'didEnter',
            'willLeave',
            'didLeave',
            'willUnload',
            'didUnload',
            'dismiss',
            'onDidDismiss',
            'onWillDismiss',
            'enableBack',
            'isFirst',
            'isLast',
            'pageRef',
            'getContent',
            'contentRef',
            'hasNavbar',
            'index',
            'subscribe',
            'getNav',
            'getIONContent',
            'writeReady',
            'readReady',
            'setBackButtonText',
            'showBackButton',
            '_setHeader',
            '_setNavbar',
            '_setNav',
            '_setInstance',
            '_setIONContent',
            '_setContent',
            '_setContentRef',
            '_setFooter',
            '_setIONContentRef'
        ]);
        instance.willEnter.and.returnValue(rxjs_1.Observable.of({}));
        instance.didEnter.and.returnValue(rxjs_1.Observable.of({}));
        instance.willLeave.and.returnValue(rxjs_1.Observable.of({}));
        instance.didLeave.and.returnValue(rxjs_1.Observable.of({}));
        instance.willUnload.and.returnValue(rxjs_1.Observable.of({}));
        instance.didUnload.and.returnValue(rxjs_1.Observable.of({}));
        instance.dismiss.and.returnValue(Promise.resolve());
        instance.onDidDismiss.and.returnValue(Promise.resolve());
        instance.onWillDismiss.and.returnValue(Promise.resolve());
        instance.enableBack.and.returnValue(true);
        instance.isFirst.and.returnValue(false);
        instance.isLast.and.returnValue(false);
        instance.pageRef.and.returnValue({});
        instance.getContent.and.returnValue({});
        instance.contentRef.and.returnValue(Promise.resolve());
        instance.hasNavbar.and.returnValue(true);
        instance.index.and.returnValue(true);
        instance.subscribe.and.returnValue(rxjs_1.Observable.of({}));
        instance.getNav.and.returnValue(nav_controller_1.NavControllerMock.instance());
        instance.getIONContent.and.returnValue({});
        instance['writeReady'] = {
            emit: function () {
            },
            subscribe: function () {
            }
        };
        instance['readReady'] = {
            emit: function () {
            },
            subscribe: function () {
            }
        };
        instance['component'] = {};
        instance['data'] = nav_params_1.NavParamsMock.instance();
        instance['instance'] = {};
        instance['id'] = '';
        return instance;
    };
    return ViewControllerMock;
}());
exports.ViewControllerMock = ViewControllerMock;
//# sourceMappingURL=view-controller.js.map